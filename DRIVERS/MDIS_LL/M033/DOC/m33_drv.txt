Function Description
====================
Wed Apr 14 12:04:18 CEST 2004
 
Overview of all Functions
-------------------------

M33_GetEntry           - Gets the entry points of the low-level driver functions. 
M33_Init               - Allocates and initialize the LL structure 
M33_Exit               - Deinitializes the hardware 
M33_Read               - (unused) 
M33_Write              - Writing to channel 'ch' on module 
M33_SetStat            - Changes the device state. 
M33_GetStat            - Gets the device state. 
M33_BlockRead          - (unused) 
M33_BlockWrite         - Output values in 'buf' to all channels of m33 module. 
M33_Irq                - (unused - the module have no interrupt ) 
M33_Info               - Gets low level driver info. 
Ident                  - Return ident string 
 

Function M33_GetEntry()
-----------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        void LL_GetEntry( LL_ENTRY* drvP )
    #else
        void M33_GetEntry( LL_ENTRY* drvP )
    #endif /* _ONE_NAMESPACE_PER_DRIVER_ */

Description:
    Gets the entry points of the low-level driver functions.

    Note:  Is used by MDIS kernel only.

Input:
    ---

Output:
    drvP  pointer to the initialized structure


Function M33_Init()
-------------------

Syntax:
    int32 M33_Init(
        DESC_SPEC       *descSpec,
        OSS_HANDLE      *osHdl,
        MACCESS         *maHdl,
        OSS_SEM_HANDLE  *devSem,
        OSS_IRQ_HANDLE  *irqHdl,
        LL_HANDLE       **llHdlP)

Description:
    Allocates and initialize the LL structure
    Decodes descriptor
    Reads and checks the ID if in descriptor enabled
    Initialize the hardware
      - reset module ( all channels to 0V / 0(4)mA )
      - sets all predefined ranges (channel options)
    The driver supports 8 analog output channels.

    Deskriptor key    Default           Range/Unit
    ------------------------------------------------------------
    DEBUG_LEVEL       OSS_DBG_DEFAULT  see dbg.h
    DEBUG_LEVEL_DESC  OSS_DBG_DEFAULT  see dbg.h
    ID_CHECK          0                0..1  0 - disabled

    CHANNEL_%d/       0                value  U[V]    I[mA]    
     M33_CH_RANGE                      -------------------------
    (%d = 0..7)                        0     0..+10   0(4)..+20
                                       1    -5..+5    prohibited 
                                       3   -10..+10   prohibited

Input:
    descSpec      descriptor specifier
    osHdl         pointer to the os specific structure
    maHdl         access handle
                  (in simplest case module base address)
    devSemHdl     device semaphore for unblocking in wait
    irqHdl        irq handle for mask and unmask interrupts
    llHdlP        pointer to the variable where low level driver
                  handle will be stored

Output:
    llHdlP        pointer to low level driver handle
    return        0 | error code


Function M33_Exit()
-------------------

Syntax:
    int32 M33_Exit(
        LL_HANDLE   **llHdlP)

Description:
    Deinitializes the hardware
    - resets all ranges
    - reset module ( all channels to 0V / 0(4)mA )
    Frees allocated memory

Input:
    llHdlP        pointer to low level driver handle

Output:
    llHdlP        NULL
    return        0 | error code


Function M33_Read()
-------------------

Syntax:
    int32 M33_Read(
        LL_HANDLE   *llHdl,
        int32       ch,
        int32       *valueP)

Description:
    (unused)

Input:
    llHdl     pointer to low-level driver data structure
    ch        current channel

Output:
    valueP    read value
    return    0 | error code


Function M33_Write()
--------------------

Syntax:
    int32 M33_Write(
        LL_HANDLE   *llHdl,
        int32       ch,
        int32       value)

Description:
    Writing to channel 'ch' on module
    - sets output value (12 bits left-aligned)

Input:
    llHdl     pointer to low-level driver data structure
    ch        current channel (0..7)
    value     0x0000..0xFFF0

Output:
    return    0 | error code


Function M33_SetStat()
----------------------

Syntax:
    int32 M33_SetStat(
        LL_HANDLE     *llHdl,
        int32         code,
        int32         ch,
        value32_or_64 value)

Description:
    Changes the device state.

    common codes            values          meaning
    ---------------------------------------------------------------------
    M_LL_DEBUG_LEVEL        see dbg.h       enable/disable debug output
    M_LL_CH_DIR             M_CH_OUT        channel direction

    M33 specific codes      values          meaning
    ---------------------------------------------------------------------
    M33_CH_RANGE            0, 1, 3         set output range

                                            value  U[V]    I[mA]    
                                            -------------------------
                                            0     0..+10   0(4)..+20
                                            1    -5..+5    prohibited 
                                            3   -10..+10   prohibited

Input:
    llHdl           pointer to low-level driver data structure
    code            setstat code
    ch              current channel (0..7)
    value32_or_64   setstat value or pointer to blocksetstat data

Output:
    return    0 | error code


Function M33_GetStat()
----------------------

Syntax:
    int32 M33_GetStat(
        LL_HANDLE   *llHdl,
        int32       code,
        int32       ch,
        INT32_OR_64 *value32_or_64P)

Description:
    Gets the device state.

    common codes            values          meaning
    ---------------------------------------------------------------------
    M_LL_CH_NUMBER          8               number of channels

    M_LL_CH_DIR             M_CH_OUT        direction of curr ch
                                             always out

    M_LL_CH_LEN             12              channel length in bit

    M_LL_CH_TYP             M_CH_ANALOG     channel type

    M_LL_ID_CHECK           0 or 1          check EEPROM-Id from module

    M_LL_DEBUG_LEVEL        see dbg.h       current debug level

    M_LL_ID_SIZE            128             eeprom size [bytes] 

    M_LL_BLK_ID_DATA        -               eeprom raw data         

    *** NOTE: getting M_LL_BLK_ID_DATA, resets the module, i.e. resets ***
    ***       all Parameters their reset state.                        ***
    ***       (this is a known driver bug)                             ***

    M_MK_BLK_REV_ID         pointer to the ident function table

    M33 specific codes      values          meaning
    ---------------------------------------------------------------------
    M33_CH_RANGE            0, 1, 3         get output range
                                            (see M33_SetStat)

Input:
    llHdl     pointer to low-level driver data structure
    code      getstat code
    ch        current channel (0..7)

Output:
    value32_or_64P  pointer to getstat value or
                    pointer to blocksetstat data
    return    0 | error code


Function M33_BlockRead()
------------------------

Syntax:
    int32 M33_BlockRead(
         LL_HANDLE  *llHdl,
         int32      ch,
         void       *buf,
         int32      size,
         int32      *nbrRdBytesP)

Description:
    (unused)

Input:
    llHdl         pointer to low-level driver data structure
    ch            current channel
    buf           buffer to store read values
    size          should be multiple of width

Output:
    nbrRdBytesP   number of read bytes
    return        0 | error code


Function M33_BlockWrite()
-------------------------

Syntax:
    int32 M33_BlockWrite(
         LL_HANDLE  *llHdl,
         int32      ch,
         void       *buf,
         int32      size,
         int32      *nbrWrBytesP
    )

Description:
    Output values in 'buf' to all channels of m33 module.
    Channels will be written in rising order (0..7).
    - loads the values of all channels
    - outputs all channels at the same time

Input:
    llHdl         pointer to low-level driver data structure
    ch            current channel (always ignored)
    buf           buffer where output values are stored
    size          number of bytes to write (8*2=16 bytes)

Output:
    nbrWrBytesP   number of written bytes (0 or 16)
    return        0 | error code   


Function M33_Irq()
------------------

Syntax:
    int32 M33_Irq(
       LL_HANDLE    *llHdl)

Description:
    (unused - the module have no interrupt )

Input:
    llHdl  pointer to ll-drv data structure

Output:
    return LL_IRQ_DEV_NOT


Function M33_Info()
-------------------

Syntax:
    int32 M33_Info
    (
       int32  infoType,
       ...
    )

Description:
    Gets low level driver info.

    NOTE: can be called before M33_Init().

    supported info type codes       value          meaning
    ------------------------------------------------------------------------
    LL_INFO_HW_CHARACTER
    arg2  u_int32 *addrModeChar    MDIS_MA08       M-Module characteristic
    arg3  u_int32 *dataModeChar    MDIS_MD16       M-Module characteristic

    LL_INFO_ADDRSPACE_COUNT
    arg2  u_int32 *nbrOfMaddr      1               number of address spaces

    LL_INFO_ADDRSPACE
    arg2  u_int32 addrNr           0       current address space
    arg3  u_int32 *addrMode        MDIS_MA08       used address mode
    arg4  u_int32 *dataMode        MDIS_MD16       used data mode
    arg5  u_int32 *addrSize        0xff            needed size

    LL_INFO_IRQ
    arg2  u_int32 *useIrq          0           module use no interrupt

    The LL_INFO_LOCKMODE 
    arg2  u_int32 *lockModeP       LL_LOCK_CALL            lock mode needed by driver

Input:
    infoType          desired information
    ...               variable argument list

Output:
    return            0 | error code


Function Ident()
----------------

Syntax:
    static char* Ident( void )

Description:
    Return ident string

Input:
    -

Output:
    return  ptr to ident string

